/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.pja.sri.lab07;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2022-07-01")
public class Customer implements org.apache.thrift.TBase<Customer, Customer._Fields>, java.io.Serializable, Cloneable, Comparable<Customer> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Customer");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SURE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sureName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BORN_YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("bornYear", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FEES_FIELD_DESC = new org.apache.thrift.protocol.TField("fees", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField IS_RENTING_FIELD_DESC = new org.apache.thrift.protocol.TField("isRenting", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField RENTED_CARS_IN_PAST_FIELD_DESC = new org.apache.thrift.protocol.TField("rentedCarsInPast", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField RENTED_CURRENTLY_FIELD_DESC = new org.apache.thrift.protocol.TField("rentedCurrently", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CustomerStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CustomerTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String sureName; // required
  public int bornYear; // required
  public long fees; // required
  public boolean isRenting; // required
  public @org.apache.thrift.annotation.Nullable CarsList rentedCarsInPast; // required
  public @org.apache.thrift.annotation.Nullable RentalCar rentedCurrently; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    SURE_NAME((short)2, "sureName"),
    BORN_YEAR((short)3, "bornYear"),
    FEES((short)4, "fees"),
    IS_RENTING((short)5, "isRenting"),
    RENTED_CARS_IN_PAST((short)6, "rentedCarsInPast"),
    RENTED_CURRENTLY((short)7, "rentedCurrently");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // SURE_NAME
          return SURE_NAME;
        case 3: // BORN_YEAR
          return BORN_YEAR;
        case 4: // FEES
          return FEES;
        case 5: // IS_RENTING
          return IS_RENTING;
        case 6: // RENTED_CARS_IN_PAST
          return RENTED_CARS_IN_PAST;
        case 7: // RENTED_CURRENTLY
          return RENTED_CURRENTLY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BORNYEAR_ISSET_ID = 0;
  private static final int __FEES_ISSET_ID = 1;
  private static final int __ISRENTING_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RENTED_CURRENTLY};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.SURE_NAME, new org.apache.thrift.meta_data.FieldMetaData("sureName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.BORN_YEAR, new org.apache.thrift.meta_data.FieldMetaData("bornYear", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.FEES, new org.apache.thrift.meta_data.FieldMetaData("fees", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.IS_RENTING, new org.apache.thrift.meta_data.FieldMetaData("isRenting", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RENTED_CARS_IN_PAST, new org.apache.thrift.meta_data.FieldMetaData("rentedCarsInPast", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CarsList.class)));
    tmpMap.put(_Fields.RENTED_CURRENTLY, new org.apache.thrift.meta_data.FieldMetaData("rentedCurrently", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RentalCar.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Customer.class, metaDataMap);
  }

  public Customer() {
  }

  public Customer(
    java.lang.String name,
    java.lang.String sureName,
    int bornYear,
    long fees,
    boolean isRenting,
    CarsList rentedCarsInPast)
  {
    this();
    this.name = name;
    this.sureName = sureName;
    this.bornYear = bornYear;
    setBornYearIsSet(true);
    this.fees = fees;
    setFeesIsSet(true);
    this.isRenting = isRenting;
    setIsRentingIsSet(true);
    this.rentedCarsInPast = rentedCarsInPast;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Customer(Customer other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetSureName()) {
      this.sureName = other.sureName;
    }
    this.bornYear = other.bornYear;
    this.fees = other.fees;
    this.isRenting = other.isRenting;
    if (other.isSetRentedCarsInPast()) {
      this.rentedCarsInPast = new CarsList(other.rentedCarsInPast);
    }
    if (other.isSetRentedCurrently()) {
      this.rentedCurrently = new RentalCar(other.rentedCurrently);
    }
  }

  public Customer deepCopy() {
    return new Customer(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.sureName = null;
    setBornYearIsSet(false);
    this.bornYear = 0;
    setFeesIsSet(false);
    this.fees = 0;
    setIsRentingIsSet(false);
    this.isRenting = false;
    this.rentedCarsInPast = null;
    this.rentedCurrently = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public Customer setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSureName() {
    return this.sureName;
  }

  public Customer setSureName(@org.apache.thrift.annotation.Nullable java.lang.String sureName) {
    this.sureName = sureName;
    return this;
  }

  public void unsetSureName() {
    this.sureName = null;
  }

  /** Returns true if field sureName is set (has been assigned a value) and false otherwise */
  public boolean isSetSureName() {
    return this.sureName != null;
  }

  public void setSureNameIsSet(boolean value) {
    if (!value) {
      this.sureName = null;
    }
  }

  public int getBornYear() {
    return this.bornYear;
  }

  public Customer setBornYear(int bornYear) {
    this.bornYear = bornYear;
    setBornYearIsSet(true);
    return this;
  }

  public void unsetBornYear() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BORNYEAR_ISSET_ID);
  }

  /** Returns true if field bornYear is set (has been assigned a value) and false otherwise */
  public boolean isSetBornYear() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BORNYEAR_ISSET_ID);
  }

  public void setBornYearIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BORNYEAR_ISSET_ID, value);
  }

  public long getFees() {
    return this.fees;
  }

  public Customer setFees(long fees) {
    this.fees = fees;
    setFeesIsSet(true);
    return this;
  }

  public void unsetFees() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FEES_ISSET_ID);
  }

  /** Returns true if field fees is set (has been assigned a value) and false otherwise */
  public boolean isSetFees() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FEES_ISSET_ID);
  }

  public void setFeesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FEES_ISSET_ID, value);
  }

  public boolean isIsRenting() {
    return this.isRenting;
  }

  public Customer setIsRenting(boolean isRenting) {
    this.isRenting = isRenting;
    setIsRentingIsSet(true);
    return this;
  }

  public void unsetIsRenting() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISRENTING_ISSET_ID);
  }

  /** Returns true if field isRenting is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRenting() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISRENTING_ISSET_ID);
  }

  public void setIsRentingIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISRENTING_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public CarsList getRentedCarsInPast() {
    return this.rentedCarsInPast;
  }

  public Customer setRentedCarsInPast(@org.apache.thrift.annotation.Nullable CarsList rentedCarsInPast) {
    this.rentedCarsInPast = rentedCarsInPast;
    return this;
  }

  public void unsetRentedCarsInPast() {
    this.rentedCarsInPast = null;
  }

  /** Returns true if field rentedCarsInPast is set (has been assigned a value) and false otherwise */
  public boolean isSetRentedCarsInPast() {
    return this.rentedCarsInPast != null;
  }

  public void setRentedCarsInPastIsSet(boolean value) {
    if (!value) {
      this.rentedCarsInPast = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public RentalCar getRentedCurrently() {
    return this.rentedCurrently;
  }

  public Customer setRentedCurrently(@org.apache.thrift.annotation.Nullable RentalCar rentedCurrently) {
    this.rentedCurrently = rentedCurrently;
    return this;
  }

  public void unsetRentedCurrently() {
    this.rentedCurrently = null;
  }

  /** Returns true if field rentedCurrently is set (has been assigned a value) and false otherwise */
  public boolean isSetRentedCurrently() {
    return this.rentedCurrently != null;
  }

  public void setRentedCurrentlyIsSet(boolean value) {
    if (!value) {
      this.rentedCurrently = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case SURE_NAME:
      if (value == null) {
        unsetSureName();
      } else {
        setSureName((java.lang.String)value);
      }
      break;

    case BORN_YEAR:
      if (value == null) {
        unsetBornYear();
      } else {
        setBornYear((java.lang.Integer)value);
      }
      break;

    case FEES:
      if (value == null) {
        unsetFees();
      } else {
        setFees((java.lang.Long)value);
      }
      break;

    case IS_RENTING:
      if (value == null) {
        unsetIsRenting();
      } else {
        setIsRenting((java.lang.Boolean)value);
      }
      break;

    case RENTED_CARS_IN_PAST:
      if (value == null) {
        unsetRentedCarsInPast();
      } else {
        setRentedCarsInPast((CarsList)value);
      }
      break;

    case RENTED_CURRENTLY:
      if (value == null) {
        unsetRentedCurrently();
      } else {
        setRentedCurrently((RentalCar)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case SURE_NAME:
      return getSureName();

    case BORN_YEAR:
      return getBornYear();

    case FEES:
      return getFees();

    case IS_RENTING:
      return isIsRenting();

    case RENTED_CARS_IN_PAST:
      return getRentedCarsInPast();

    case RENTED_CURRENTLY:
      return getRentedCurrently();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case SURE_NAME:
      return isSetSureName();
    case BORN_YEAR:
      return isSetBornYear();
    case FEES:
      return isSetFees();
    case IS_RENTING:
      return isSetIsRenting();
    case RENTED_CARS_IN_PAST:
      return isSetRentedCarsInPast();
    case RENTED_CURRENTLY:
      return isSetRentedCurrently();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Customer)
      return this.equals((Customer)that);
    return false;
  }

  public boolean equals(Customer that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_sureName = true && this.isSetSureName();
    boolean that_present_sureName = true && that.isSetSureName();
    if (this_present_sureName || that_present_sureName) {
      if (!(this_present_sureName && that_present_sureName))
        return false;
      if (!this.sureName.equals(that.sureName))
        return false;
    }

    boolean this_present_bornYear = true;
    boolean that_present_bornYear = true;
    if (this_present_bornYear || that_present_bornYear) {
      if (!(this_present_bornYear && that_present_bornYear))
        return false;
      if (this.bornYear != that.bornYear)
        return false;
    }

    boolean this_present_fees = true;
    boolean that_present_fees = true;
    if (this_present_fees || that_present_fees) {
      if (!(this_present_fees && that_present_fees))
        return false;
      if (this.fees != that.fees)
        return false;
    }

    boolean this_present_isRenting = true;
    boolean that_present_isRenting = true;
    if (this_present_isRenting || that_present_isRenting) {
      if (!(this_present_isRenting && that_present_isRenting))
        return false;
      if (this.isRenting != that.isRenting)
        return false;
    }

    boolean this_present_rentedCarsInPast = true && this.isSetRentedCarsInPast();
    boolean that_present_rentedCarsInPast = true && that.isSetRentedCarsInPast();
    if (this_present_rentedCarsInPast || that_present_rentedCarsInPast) {
      if (!(this_present_rentedCarsInPast && that_present_rentedCarsInPast))
        return false;
      if (!this.rentedCarsInPast.equals(that.rentedCarsInPast))
        return false;
    }

    boolean this_present_rentedCurrently = true && this.isSetRentedCurrently();
    boolean that_present_rentedCurrently = true && that.isSetRentedCurrently();
    if (this_present_rentedCurrently || that_present_rentedCurrently) {
      if (!(this_present_rentedCurrently && that_present_rentedCurrently))
        return false;
      if (!this.rentedCurrently.equals(that.rentedCurrently))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetSureName()) ? 131071 : 524287);
    if (isSetSureName())
      hashCode = hashCode * 8191 + sureName.hashCode();

    hashCode = hashCode * 8191 + bornYear;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(fees);

    hashCode = hashCode * 8191 + ((isRenting) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetRentedCarsInPast()) ? 131071 : 524287);
    if (isSetRentedCarsInPast())
      hashCode = hashCode * 8191 + rentedCarsInPast.hashCode();

    hashCode = hashCode * 8191 + ((isSetRentedCurrently()) ? 131071 : 524287);
    if (isSetRentedCurrently())
      hashCode = hashCode * 8191 + rentedCurrently.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Customer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSureName()).compareTo(other.isSetSureName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSureName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sureName, other.sureName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBornYear()).compareTo(other.isSetBornYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBornYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bornYear, other.bornYear);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFees()).compareTo(other.isSetFees());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFees()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fees, other.fees);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsRenting()).compareTo(other.isSetIsRenting());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRenting()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRenting, other.isRenting);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRentedCarsInPast()).compareTo(other.isSetRentedCarsInPast());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRentedCarsInPast()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rentedCarsInPast, other.rentedCarsInPast);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRentedCurrently()).compareTo(other.isSetRentedCurrently());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRentedCurrently()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rentedCurrently, other.rentedCurrently);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Customer(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sureName:");
    if (this.sureName == null) {
      sb.append("null");
    } else {
      sb.append(this.sureName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bornYear:");
    sb.append(this.bornYear);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fees:");
    sb.append(this.fees);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isRenting:");
    sb.append(this.isRenting);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rentedCarsInPast:");
    if (this.rentedCarsInPast == null) {
      sb.append("null");
    } else {
      sb.append(this.rentedCarsInPast);
    }
    first = false;
    if (isSetRentedCurrently()) {
      if (!first) sb.append(", ");
      sb.append("rentedCurrently:");
      if (this.rentedCurrently == null) {
        sb.append("null");
      } else {
        sb.append(this.rentedCurrently);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (rentedCarsInPast != null) {
      rentedCarsInPast.validate();
    }
    if (rentedCurrently != null) {
      rentedCurrently.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CustomerStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CustomerStandardScheme getScheme() {
      return new CustomerStandardScheme();
    }
  }

  private static class CustomerStandardScheme extends org.apache.thrift.scheme.StandardScheme<Customer> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Customer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SURE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sureName = iprot.readString();
              struct.setSureNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BORN_YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bornYear = iprot.readI32();
              struct.setBornYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FEES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fees = iprot.readI64();
              struct.setFeesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_RENTING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isRenting = iprot.readBool();
              struct.setIsRentingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RENTED_CARS_IN_PAST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rentedCarsInPast = new CarsList();
              struct.rentedCarsInPast.read(iprot);
              struct.setRentedCarsInPastIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RENTED_CURRENTLY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rentedCurrently = new RentalCar();
              struct.rentedCurrently.read(iprot);
              struct.setRentedCurrentlyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Customer struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.sureName != null) {
        oprot.writeFieldBegin(SURE_NAME_FIELD_DESC);
        oprot.writeString(struct.sureName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BORN_YEAR_FIELD_DESC);
      oprot.writeI32(struct.bornYear);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FEES_FIELD_DESC);
      oprot.writeI64(struct.fees);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_RENTING_FIELD_DESC);
      oprot.writeBool(struct.isRenting);
      oprot.writeFieldEnd();
      if (struct.rentedCarsInPast != null) {
        oprot.writeFieldBegin(RENTED_CARS_IN_PAST_FIELD_DESC);
        struct.rentedCarsInPast.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.rentedCurrently != null) {
        if (struct.isSetRentedCurrently()) {
          oprot.writeFieldBegin(RENTED_CURRENTLY_FIELD_DESC);
          struct.rentedCurrently.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CustomerTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CustomerTupleScheme getScheme() {
      return new CustomerTupleScheme();
    }
  }

  private static class CustomerTupleScheme extends org.apache.thrift.scheme.TupleScheme<Customer> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Customer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetSureName()) {
        optionals.set(1);
      }
      if (struct.isSetBornYear()) {
        optionals.set(2);
      }
      if (struct.isSetFees()) {
        optionals.set(3);
      }
      if (struct.isSetIsRenting()) {
        optionals.set(4);
      }
      if (struct.isSetRentedCarsInPast()) {
        optionals.set(5);
      }
      if (struct.isSetRentedCurrently()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetSureName()) {
        oprot.writeString(struct.sureName);
      }
      if (struct.isSetBornYear()) {
        oprot.writeI32(struct.bornYear);
      }
      if (struct.isSetFees()) {
        oprot.writeI64(struct.fees);
      }
      if (struct.isSetIsRenting()) {
        oprot.writeBool(struct.isRenting);
      }
      if (struct.isSetRentedCarsInPast()) {
        struct.rentedCarsInPast.write(oprot);
      }
      if (struct.isSetRentedCurrently()) {
        struct.rentedCurrently.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Customer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sureName = iprot.readString();
        struct.setSureNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bornYear = iprot.readI32();
        struct.setBornYearIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fees = iprot.readI64();
        struct.setFeesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isRenting = iprot.readBool();
        struct.setIsRentingIsSet(true);
      }
      if (incoming.get(5)) {
        struct.rentedCarsInPast = new CarsList();
        struct.rentedCarsInPast.read(iprot);
        struct.setRentedCarsInPastIsSet(true);
      }
      if (incoming.get(6)) {
        struct.rentedCurrently = new RentalCar();
        struct.rentedCurrently.read(iprot);
        struct.setRentedCurrentlyIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

