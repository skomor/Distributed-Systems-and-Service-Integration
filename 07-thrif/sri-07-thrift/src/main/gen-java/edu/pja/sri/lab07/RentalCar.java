/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.pja.sri.lab07;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2022-07-01")
public class RentalCar implements org.apache.thrift.TBase<RentalCar, RentalCar._Fields>, java.io.Serializable, Cloneable, Comparable<RentalCar> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RentalCar");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VIN_FIELD_DESC = new org.apache.thrift.protocol.TField("vin", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("year", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField BRAND_FIELD_DESC = new org.apache.thrift.protocol.TField("brand", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IS_RENTED_FIELD_DESC = new org.apache.thrift.protocol.TField("isRented", org.apache.thrift.protocol.TType.BOOL, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RentalCarStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RentalCarTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String vin; // required
  public long year; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String brand; // required
  public boolean isRented; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    VIN((short)2, "vin"),
    YEAR((short)3, "year"),
    BRAND((short)4, "brand"),
    IS_RENTED((short)5, "isRented");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // VIN
          return VIN;
        case 3: // YEAR
          return YEAR;
        case 4: // BRAND
          return BRAND;
        case 5: // IS_RENTED
          return IS_RENTED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __YEAR_ISSET_ID = 0;
  private static final int __ISRENTED_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.VIN, new org.apache.thrift.meta_data.FieldMetaData("vin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.YEAR, new org.apache.thrift.meta_data.FieldMetaData("year", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.BRAND, new org.apache.thrift.meta_data.FieldMetaData("brand", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "String")));
    tmpMap.put(_Fields.IS_RENTED, new org.apache.thrift.meta_data.FieldMetaData("isRented", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RentalCar.class, metaDataMap);
  }

  public RentalCar() {
  }

  public RentalCar(
    java.lang.String name,
    java.lang.String vin,
    long year,
    java.lang.String brand,
    boolean isRented)
  {
    this();
    this.name = name;
    this.vin = vin;
    this.year = year;
    setYearIsSet(true);
    this.brand = brand;
    this.isRented = isRented;
    setIsRentedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RentalCar(RentalCar other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetVin()) {
      this.vin = other.vin;
    }
    this.year = other.year;
    if (other.isSetBrand()) {
      this.brand = other.brand;
    }
    this.isRented = other.isRented;
  }

  public RentalCar deepCopy() {
    return new RentalCar(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.vin = null;
    setYearIsSet(false);
    this.year = 0;
    this.brand = null;
    setIsRentedIsSet(false);
    this.isRented = false;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public RentalCar setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getVin() {
    return this.vin;
  }

  public RentalCar setVin(@org.apache.thrift.annotation.Nullable java.lang.String vin) {
    this.vin = vin;
    return this;
  }

  public void unsetVin() {
    this.vin = null;
  }

  /** Returns true if field vin is set (has been assigned a value) and false otherwise */
  public boolean isSetVin() {
    return this.vin != null;
  }

  public void setVinIsSet(boolean value) {
    if (!value) {
      this.vin = null;
    }
  }

  public long getYear() {
    return this.year;
  }

  public RentalCar setYear(long year) {
    this.year = year;
    setYearIsSet(true);
    return this;
  }

  public void unsetYear() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __YEAR_ISSET_ID);
  }

  /** Returns true if field year is set (has been assigned a value) and false otherwise */
  public boolean isSetYear() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __YEAR_ISSET_ID);
  }

  public void setYearIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __YEAR_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getBrand() {
    return this.brand;
  }

  public RentalCar setBrand(@org.apache.thrift.annotation.Nullable java.lang.String brand) {
    this.brand = brand;
    return this;
  }

  public void unsetBrand() {
    this.brand = null;
  }

  /** Returns true if field brand is set (has been assigned a value) and false otherwise */
  public boolean isSetBrand() {
    return this.brand != null;
  }

  public void setBrandIsSet(boolean value) {
    if (!value) {
      this.brand = null;
    }
  }

  public boolean isIsRented() {
    return this.isRented;
  }

  public RentalCar setIsRented(boolean isRented) {
    this.isRented = isRented;
    setIsRentedIsSet(true);
    return this;
  }

  public void unsetIsRented() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISRENTED_ISSET_ID);
  }

  /** Returns true if field isRented is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRented() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISRENTED_ISSET_ID);
  }

  public void setIsRentedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISRENTED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case VIN:
      if (value == null) {
        unsetVin();
      } else {
        setVin((java.lang.String)value);
      }
      break;

    case YEAR:
      if (value == null) {
        unsetYear();
      } else {
        setYear((java.lang.Long)value);
      }
      break;

    case BRAND:
      if (value == null) {
        unsetBrand();
      } else {
        setBrand((java.lang.String)value);
      }
      break;

    case IS_RENTED:
      if (value == null) {
        unsetIsRented();
      } else {
        setIsRented((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case VIN:
      return getVin();

    case YEAR:
      return getYear();

    case BRAND:
      return getBrand();

    case IS_RENTED:
      return isIsRented();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case VIN:
      return isSetVin();
    case YEAR:
      return isSetYear();
    case BRAND:
      return isSetBrand();
    case IS_RENTED:
      return isSetIsRented();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof RentalCar)
      return this.equals((RentalCar)that);
    return false;
  }

  public boolean equals(RentalCar that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_vin = true && this.isSetVin();
    boolean that_present_vin = true && that.isSetVin();
    if (this_present_vin || that_present_vin) {
      if (!(this_present_vin && that_present_vin))
        return false;
      if (!this.vin.equals(that.vin))
        return false;
    }

    boolean this_present_year = true;
    boolean that_present_year = true;
    if (this_present_year || that_present_year) {
      if (!(this_present_year && that_present_year))
        return false;
      if (this.year != that.year)
        return false;
    }

    boolean this_present_brand = true && this.isSetBrand();
    boolean that_present_brand = true && that.isSetBrand();
    if (this_present_brand || that_present_brand) {
      if (!(this_present_brand && that_present_brand))
        return false;
      if (!this.brand.equals(that.brand))
        return false;
    }

    boolean this_present_isRented = true;
    boolean that_present_isRented = true;
    if (this_present_isRented || that_present_isRented) {
      if (!(this_present_isRented && that_present_isRented))
        return false;
      if (this.isRented != that.isRented)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetVin()) ? 131071 : 524287);
    if (isSetVin())
      hashCode = hashCode * 8191 + vin.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(year);

    hashCode = hashCode * 8191 + ((isSetBrand()) ? 131071 : 524287);
    if (isSetBrand())
      hashCode = hashCode * 8191 + brand.hashCode();

    hashCode = hashCode * 8191 + ((isRented) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(RentalCar other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVin()).compareTo(other.isSetVin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vin, other.vin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetYear()).compareTo(other.isSetYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.year, other.year);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBrand()).compareTo(other.isSetBrand());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrand()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brand, other.brand);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsRented()).compareTo(other.isSetIsRented());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRented()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRented, other.isRented);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("RentalCar(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vin:");
    if (this.vin == null) {
      sb.append("null");
    } else {
      sb.append(this.vin);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("year:");
    sb.append(this.year);
    first = false;
    if (!first) sb.append(", ");
    sb.append("brand:");
    if (this.brand == null) {
      sb.append("null");
    } else {
      sb.append(this.brand);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isRented:");
    sb.append(this.isRented);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RentalCarStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RentalCarStandardScheme getScheme() {
      return new RentalCarStandardScheme();
    }
  }

  private static class RentalCarStandardScheme extends org.apache.thrift.scheme.StandardScheme<RentalCar> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RentalCar struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vin = iprot.readString();
              struct.setVinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.year = iprot.readI64();
              struct.setYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BRAND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brand = iprot.readString();
              struct.setBrandIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_RENTED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isRented = iprot.readBool();
              struct.setIsRentedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RentalCar struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.vin != null) {
        oprot.writeFieldBegin(VIN_FIELD_DESC);
        oprot.writeString(struct.vin);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(YEAR_FIELD_DESC);
      oprot.writeI64(struct.year);
      oprot.writeFieldEnd();
      if (struct.brand != null) {
        oprot.writeFieldBegin(BRAND_FIELD_DESC);
        oprot.writeString(struct.brand);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_RENTED_FIELD_DESC);
      oprot.writeBool(struct.isRented);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RentalCarTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RentalCarTupleScheme getScheme() {
      return new RentalCarTupleScheme();
    }
  }

  private static class RentalCarTupleScheme extends org.apache.thrift.scheme.TupleScheme<RentalCar> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RentalCar struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetVin()) {
        optionals.set(1);
      }
      if (struct.isSetYear()) {
        optionals.set(2);
      }
      if (struct.isSetBrand()) {
        optionals.set(3);
      }
      if (struct.isSetIsRented()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetVin()) {
        oprot.writeString(struct.vin);
      }
      if (struct.isSetYear()) {
        oprot.writeI64(struct.year);
      }
      if (struct.isSetBrand()) {
        oprot.writeString(struct.brand);
      }
      if (struct.isSetIsRented()) {
        oprot.writeBool(struct.isRented);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RentalCar struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.vin = iprot.readString();
        struct.setVinIsSet(true);
      }
      if (incoming.get(2)) {
        struct.year = iprot.readI64();
        struct.setYearIsSet(true);
      }
      if (incoming.get(3)) {
        struct.brand = iprot.readString();
        struct.setBrandIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isRented = iprot.readBool();
        struct.setIsRentedIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

